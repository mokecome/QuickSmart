name: Database Migration

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - production
          - staging
      confirm:
        description: 'Type "CONFIRM" to proceed with migration'
        required: true

jobs:
  migrate:
    name: Run Database Migration
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Validate confirmation
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "CONFIRM" ]; then
            echo "❌ Migration cancelled - confirmation required"
            exit 1
          fi

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Link to Supabase project
        run: |
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Backup database
        run: |
          echo "Creating database backup..."
          supabase db dump --project-ref ${{ secrets.SUPABASE_PROJECT_REF }} > backup-$(date +%Y%m%d-%H%M%S).sql
          echo "✅ Backup created"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Run migrations
        run: |
          echo "Running database migrations..."
          supabase db push --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
          echo "✅ Migrations applied successfully"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Verify migration
        run: |
          echo "Verifying migration..."
          supabase db diff --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Upload backup
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: database-backup
          path: backup-*.sql
          retention-days: 30

      - name: Notify success
        uses: actions/github-script@v7
        if: success()
        with:
          script: |
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `✅ Database migration completed successfully!\n\nEnvironment: ${{ github.event.inputs.environment }}\nBackup saved as artifact.`
            })

      - name: Notify failure
        uses: actions/github-script@v7
        if: failure()
        with:
          script: |
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `⚠️ Database migration failed!\n\nEnvironment: ${{ github.event.inputs.environment }}\nPlease check the logs and backup.`
            })
